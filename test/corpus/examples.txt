================================================================================
corelib_usage.cairo
================================================================================

impl MyCopy of Copy::<Option::<(felt, felt)>>;

func foo(x: Option::<(felt, felt)>) -> Option::<felt> {
    let y = x;
    match x {
        Option::Some(x) => {
            let (x, y) = x;
            Option::<felt>::Some(x)
        },
    }
}

--------------------------------------------------------------------------------

(source_file
  (impl
    (identifier)
    (path_expression
      (generic_argument_path_segment
        (identifier)
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (tuple_expression
              (path_expression
                (simple_path_segment
                  (identifier)))
              (path_expression
                (simple_path_segment
                  (identifier)))))))))
  (free_function
    (identifier)
    (function_signature
      (identifier)
      (type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (tuple_expression
              (path_expression
                (simple_path_segment
                  (identifier)))
              (path_expression
                (simple_path_segment
                  (identifier)))))))
      (return_type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier)))))))
    (block_expression
      (let_statement
        (identifier)
        (path_expression
          (simple_path_segment
            (identifier))))
      (expression_statement
        (match_expression
          (path_expression
            (simple_path_segment
              (identifier)))
          (match_arm
            (path_expression
              (simple_path_segment
                (identifier))
              (simple_path_segment
                (identifier)))
            (identifier)
            (block_expression
              (let_statement
                (identifier)
                (identifier)
                (path_expression
                  (simple_path_segment
                    (identifier))))
              (return_statement
                (function_call_expression
                  (path_expression
                    (generic_argument_path_segment
                      (identifier)
                      (path_expression
                        (simple_path_segment
                          (identifier))))
                    (simple_path_segment
                      (identifier)))
                  (path_expression
                    (simple_path_segment
                      (identifier))))))))))))

================================================================================
fib.cairo
================================================================================

// Calculates fib...
func fib(a: felt, b: felt, n: felt) -> felt {
    match n {
        0 => a,
        _ => fib(b, a + b, n - 1),
    }
}


--------------------------------------------------------------------------------

(source_file
  (comment)
  (free_function
    (identifier)
    (function_signature
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (return_type_clause
        (path_expression
          (simple_path_segment
            (identifier)))))
    (block_expression
      (expression_statement
        (match_expression
          (path_expression
            (simple_path_segment
              (identifier)))
          (match_arm
            (literal_expression
              (integer_literal))
            (path_expression
              (simple_path_segment
                (identifier))))
          (match_arm
            (function_call_expression
              (path_expression
                (simple_path_segment
                  (identifier)))
              (path_expression
                (simple_path_segment
                  (identifier)))
              (binary_expression
                (path_expression
                  (simple_path_segment
                    (identifier)))
                (path_expression
                  (simple_path_segment
                    (identifier))))
              (binary_expression
                (path_expression
                  (simple_path_segment
                    (identifier)))
                (literal_expression
                  (integer_literal))))))))))

================================================================================
fib_array.cairo
================================================================================

// Returns an array of size n with the values of the Fibonacci sequence.
func fib(n: felt) -> Array::<felt> {
    fib_inner(1, 1, n, array_new::<felt>())
}

func fib_inner(a: felt, b: felt, remaining: felt, mut arr: Array::<felt>) -> Array::<felt> {
    if remaining == 0 {
        return arr;
    }

    array_append::<felt>(arr, a);
    fib_inner(b, a + b, remaining - 1, arr)
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (free_function
    (identifier)
    (function_signature
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (return_type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier)))))))
    (block_expression
      (return_statement
        (function_call_expression
          (path_expression
            (simple_path_segment
              (identifier)))
          (literal_expression
            (integer_literal))
          (literal_expression
            (integer_literal))
          (path_expression
            (simple_path_segment
              (identifier)))
          (function_call_expression
            (path_expression
              (generic_argument_path_segment
                (identifier)
                (path_expression
                  (simple_path_segment
                    (identifier))))))))))
  (free_function
    (identifier)
    (function_signature
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (identifier)
      (type_clause
        (path_expression
          (simple_path_segment
            (identifier))))
      (identifier)
      (type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier))))))
      (return_type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier)))))))
    (block_expression
      (return_statement
        (if_expression
          (binary_expression
            (path_expression
              (simple_path_segment
                (identifier)))
            (literal_expression
              (integer_literal)))
          (block_expression
            (return_statement
              (path_expression
                (simple_path_segment
                  (identifier)))))))
      (expression_statement
        (function_call_expression
          (path_expression
            (generic_argument_path_segment
              (identifier)
              (path_expression
                (simple_path_segment
                  (identifier)))))
          (path_expression
            (simple_path_segment
              (identifier)))
          (path_expression
            (simple_path_segment
              (identifier)))))
      (return_statement
        (function_call_expression
          (path_expression
            (simple_path_segment
              (identifier)))
          (path_expression
            (simple_path_segment
              (identifier)))
          (binary_expression
            (path_expression
              (simple_path_segment
                (identifier)))
            (path_expression
              (simple_path_segment
                (identifier))))
          (binary_expression
            (path_expression
              (simple_path_segment
                (identifier)))
            (literal_expression
              (integer_literal)))
          (path_expression
            (simple_path_segment
              (identifier))))))))

================================================================================
fib_box.cairo
================================================================================

// Calculates fib, but all variables are boxes.
func fib(a: Box::<felt>, b: Box::<felt>, n: Box::<felt>) -> Box::<felt> {
    let unboxed_n = unbox::<felt>(n);
    if unboxed_n == 0 {
        a
    } else {
        fib(
            b,
            into_box::<felt>(unbox::<felt>(a) + unbox::<felt>(b)),
            into_box::<felt>(unboxed_n - 1),
        )
    }
}

--------------------------------------------------------------------------------

(source_file
  (comment)
  (free_function
    (identifier)
    (function_signature
      (identifier)
      (type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier))))))
      (identifier)
      (type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier))))))
      (identifier)
      (type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier))))))
      (return_type_clause
        (path_expression
          (generic_argument_path_segment
            (identifier)
            (path_expression
              (simple_path_segment
                (identifier)))))))
    (block_expression
      (let_statement
        (identifier)
        (function_call_expression
          (path_expression
            (generic_argument_path_segment
              (identifier)
              (path_expression
                (simple_path_segment
                  (identifier)))))
          (path_expression
            (simple_path_segment
              (identifier)))))
      (return_statement
        (if_expression
          (binary_expression
            (path_expression
              (simple_path_segment
                (identifier)))
            (literal_expression
              (integer_literal)))
          (block_expression
            (return_statement
              (path_expression
                (simple_path_segment
                  (identifier)))))
          (else_clause
            (block_expression
              (return_statement
                (function_call_expression
                  (path_expression
                    (simple_path_segment
                      (identifier)))
                  (path_expression
                    (simple_path_segment
                      (identifier)))
                  (function_call_expression
                    (path_expression
                      (generic_argument_path_segment
                        (identifier)
                        (path_expression
                          (simple_path_segment
                            (identifier)))))
                    (binary_expression
                      (function_call_expression
                        (path_expression
                          (generic_argument_path_segment
                            (identifier)
                            (path_expression
                              (simple_path_segment
                                (identifier)))))
                        (path_expression
                          (simple_path_segment
                            (identifier))))
                      (function_call_expression
                        (path_expression
                          (generic_argument_path_segment
                            (identifier)
                            (path_expression
                              (simple_path_segment
                                (identifier)))))
                        (path_expression
                          (simple_path_segment
                            (identifier))))))
                  (function_call_expression
                    (path_expression
                      (generic_argument_path_segment
                        (identifier)
                        (path_expression
                          (simple_path_segment
                            (identifier)))))
                    (binary_expression
                      (path_expression
                        (simple_path_segment
                          (identifier)))
                      (literal_expression
                        (integer_literal)))))))))))))
